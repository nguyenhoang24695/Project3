@model NgoProjectk3.Models.Donation

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Mylayout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Donation</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.DonorId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("DonorId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DonorId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProgramId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("ProgramId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ProgramId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
    <div id="paypal-button-container"></div>
    <script>
        paypal.Buttons({
            createOrder: function(data, actions) {
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: '12'
                        }
                    }]
                });
            },
            onApprove: function(data, actions) {
                return actions.order.capture().then(function(details) {
                    alert('Transaction completed by ' + details.payer.name.given_name);
                    // Call your server to save the transaction
                    //return fetch('PaypalResponse', {
                    //    contentType : "application/json",
                    //    method: 'post',
                    //    body: JSON.stringify({
                    //        orderID: data.orderID
                    //    })
                    //});
                    return $.ajax({
                        method: 'POST',
                        url: 'PaypalResponse',
                        headers: {
                            'content-type': 'application/json'
                        },
                        data: JSON.stringify({
                                   orderID: data.orderID
                               }),
                        success: function (data, textStatus, jqXHR) {
                            alert("ok");
                            console.log(data);

                        },
                        error: function (jqXHR, exception) {
                            console.log('An error happened. An subject wasn`t created');
                            console.log(jqXHR);
                        }
                    });
                });
            }
        }).render('#paypal-button-container');
    </script>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
